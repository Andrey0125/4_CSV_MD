#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è JSONL —Ñ–∞–π–ª–∞ –≤ markdown –¥–ª—è Obsidian
"""

import json
import os
from datetime import datetime
from pathlib import Path


def format_date_for_obsidian(date_str):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É –¥–ª—è Obsidian"""
    try:
        dt = datetime.strptime(date_str, "%Y-%m-%d %H:%M:%S")
        return dt.strftime("%Y-%m-%d %H:%M")
    except:
        return date_str


def format_text_for_obsidian(text):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è Obsidian —Å —É—á–µ—Ç–æ–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞"""
    if not text:
        return ""
    
    # –ó–∞–º–µ–Ω—è–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –Ω–∞ –¥–≤–æ–π–Ω—ã–µ –¥–ª—è markdown
    text = text.replace('\n', '\n\n')
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–∏—Å–∫–∏
    lines = text.split('\n')
    formatted_lines = []
    
    for line in lines:
        line = line.strip()
        if not line:
            formatted_lines.append('')
            continue
            
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏
        if line.startswith(('1)', '2)', '3)', '4)', '5)', '6)', '7)', '8)', '9)')):
            formatted_lines.append(f"- {line[2:].strip()}")
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏
        elif line.startswith(('‚Ä¢', '-', '*')):
            formatted_lines.append(f"- {line[1:].strip()}")
        else:
            formatted_lines.append(line)
    
    return '\n'.join(formatted_lines)


def create_obsidian_markdown(posts):
    """–°–æ–∑–¥–∞–µ—Ç markdown –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è Obsidian"""
    markdown_content = []
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    markdown_content.append("# –í—Å–µ –ø–æ—Å—Ç—ã –∏–∑ Telegram –∫–∞–Ω–∞–ª–æ–≤")
    markdown_content.append("")
    markdown_content.append(f"*–°–æ–∑–¥–∞–Ω–æ: {datetime.now().strftime('%Y-%m-%d %H:%M')}*")
    markdown_content.append("")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_posts = len(posts)
    sources = {}
    for post in posts:
        source = post.get('_source_file', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        sources[source] = sources.get(source, 0) + 1
    
    markdown_content.append("## –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    markdown_content.append(f"- **–í—Å–µ–≥–æ –ø–æ—Å—Ç–æ–≤:** {total_posts}")
    markdown_content.append(f"- **–ò—Å—Ç–æ—á–Ω–∏–∫–æ–≤:** {len(sources)}")
    markdown_content.append("")
    
    # –°–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
    markdown_content.append("### –ò—Å—Ç–æ—á–Ω–∏–∫–∏:")
    for source, count in sorted(sources.items()):
        markdown_content.append(f"- {source}: {count} –ø–æ—Å—Ç–æ–≤")
    markdown_content.append("")
    
    # –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ
    markdown_content.append("## –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ")
    markdown_content.append("")
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
    posts_by_source = {}
    for post in posts:
        source = post.get('_source_file', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        if source not in posts_by_source:
            posts_by_source[source] = []
        posts_by_source[source].append(post)
    
    # –°–æ–∑–¥–∞–µ–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ
    for source, source_posts in sorted(posts_by_source.items()):
        markdown_content.append(f"### {source}")
        markdown_content.append("")
        
        for i, post in enumerate(source_posts, 1):
            title = post.get('ai_generated_title', '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞')
            date = post.get('date', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –¥–∞—Ç–∞')
            formatted_date = format_date_for_obsidian(date)
            
            markdown_content.append(f"{i}. [[{title}]] - {formatted_date}")
        
        markdown_content.append("")
    
    # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
    markdown_content.append("---")
    markdown_content.append("")
    
    # –ü–æ—Å—Ç—ã
    for source, source_posts in sorted(posts_by_source.items()):
        markdown_content.append(f"## {source}")
        markdown_content.append("")
        
        for post in source_posts:
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ—Å—Ç–∞
            title = post.get('ai_generated_title', '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞')
            markdown_content.append(f"### {title}")
            markdown_content.append("")
            
            # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            date = post.get('date', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –¥–∞—Ç–∞')
            formatted_date = format_date_for_obsidian(date)
            markdown_content.append(f"**–î–∞—Ç–∞:** {formatted_date}")
            markdown_content.append("")
            
            # –¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞
            text = post.get('text', post.get('content', post.get('message', '')))
            if text:
                formatted_text = format_text_for_obsidian(text)
                markdown_content.append(formatted_text)
                markdown_content.append("")
            
            # –°—Å—ã–ª–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
            if 'link' in post and post['link']:
                markdown_content.append(f"**–°—Å—ã–ª–∫–∞:** {post['link']}")
                markdown_content.append("")
            
            # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É –ø–æ—Å—Ç–∞–º–∏
            markdown_content.append("---")
            markdown_content.append("")
    
    return '\n'.join(markdown_content)


def create_table_of_contents(posts):
    """–°–æ–∑–¥–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –¥–ª—è Obsidian"""
    toc_content = []
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
    posts_by_source = {}
    for post in posts:
        source = post.get('_source_file', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        if source not in posts_by_source:
            posts_by_source[source] = []
        posts_by_source[source].append(post)
    
    toc_content.append("# –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ")
    toc_content.append("")
    
    for source, source_posts in sorted(posts_by_source.items()):
        toc_content.append(f"## {source}")
        toc_content.append("")
        
        for i, post in enumerate(source_posts, 1):
            title = post.get('ai_generated_title', '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞')
            date = post.get('date', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –¥–∞—Ç–∞')
            formatted_date = format_date_for_obsidian(date)
            
            toc_content.append(f"{i}. [[{title}]] - {formatted_date}")
        
        toc_content.append("")
    
    return '\n'.join(toc_content)


def process_jsonl_to_obsidian(input_file, output_dir):
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è JSONL –≤ Obsidian Markdown")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º –≤—ã—Ö–æ–¥–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    Path(output_dir).mkdir(parents=True, exist_ok=True)
    
    # –ß–∏—Ç–∞–µ–º JSONL —Ñ–∞–π–ª
    posts = []
    try:
        with open(input_file, 'r', encoding='utf-8') as f:
            for line_num, line in enumerate(f, 1):
                line = line.strip()
                if not line:
                    continue
                
                try:
                    post = json.loads(line)
                    posts.append(post)
                    title = post.get('ai_generated_title', '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞')
                    print(f"‚úì –ó–∞–≥—Ä—É–∂–µ–Ω –ø–æ—Å—Ç {len(posts)}: {title[:50]}...")
                except json.JSONDecodeError as e:
                    print(f"‚úó –û—à–∏–±–∫–∞ JSON –≤ —Å—Ç—Ä–æ–∫–µ {line_num}: {e}")
                    continue
    except FileNotFoundError:
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {input_file}")
        return
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
        return
    
    if not posts:
        print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        return
    
    print(f"\nüìã –°–æ–∑–¥–∞—é —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ...")
    
    # –°–æ–∑–¥–∞–µ–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ
    toc_content = create_table_of_contents(posts)
    toc_file = Path(output_dir) / "table_of_contents.md"
    with open(toc_file, 'w', encoding='utf-8') as f:
        f.write(toc_content)
    
    print(f"üìù –§–æ—Ä–º–∏—Ä—É—é –æ–±—â–∏–π —Ñ–∞–π–ª...")
    
    # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π markdown —Ñ–∞–π–ª
    markdown_content = create_obsidian_markdown(posts)
    output_file = Path(output_dir) / "all_posts.md"
    
    with open(output_file, 'w', encoding='utf-8') as f:
        f.write(markdown_content)
    
    print(f"‚úì –°–æ–∑–¥–∞–Ω –æ–±—â–∏–π —Ñ–∞–π–ª: {output_file}")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏:")
    print(f"‚úì –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(posts)} –ø–æ—Å—Ç–æ–≤")
    print(f"‚úó –û—à–∏–±–æ–∫: 0")
    print(f"üìÅ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_file}")
    print(f"\nüéâ –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    input_file = "/home/andrey/projects/Cursor/4_CSV_MD/2_JSONL_AI/output/analyzed_combined_posts.jsonl"
    output_dir = "/home/andrey/projects/Cursor/4_CSV_MD/3_MD/output"
    
    process_jsonl_to_obsidian(input_file, output_dir)


if __name__ == "__main__":
    main()